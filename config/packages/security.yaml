security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                always_remember_me: true
            custom_authenticator:
                - App\Security\UserAuthenticator
            logout:
                path: security_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(connexion|inscription|reset-password|verificationemail), roles: PUBLIC_ACCESS }
        # Routes n√©cessires pour le formulaire de connexion
        - { path: ^/api/users/(check-username|resend-email), roles: PUBLIC_ACCESS }
        - { path: ^/api/collectivites/(check-siret|infos), roles: PUBLIC_ACCESS }
        - { path: ^/api/insee/siret, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: ROLE_USER }
        - { path: ^/api/opsns, roles: PUBLIC_ACCESS, methods: GET }
        - { path: ^/api/opsns, roles: ROLE_SUPER_ADMIN }
        - { path: ^/api/collectivites, roles: ROLE_COLLECTIVITE }
        - { path: ^/api, roles: PUBLIC_ACCESS }

        - { path: ^/admin/utilisateurs, roles: ROLE_COLLECTIVITE }
        - { path: ^/admin/collectivites, roles: ROLE_USER_OPSN }
        - { path: ^/admin/collectivites/all, roles: ROLE_OPSN }
        - { path: ^/admin/opsn/rattachement, roles: ROLE_USER_OPSN }
        - { path: ^/admin/opsn, roles: ROLE_SUPER_ADMIN }
        - { path: ^/admin, roles: ROLE_USER_OPSN }
        - { path: ^/, roles: ROLE_USER }

    role_hierarchy:
        ROLE_COLLECTIVITE: ROLE_USER
        ROLE_USER_OPSN: ROLE_COLLECTIVITE
        ROLE_OPSN : ROLE_USER_OPSN
        ROLE_SUPER_ADMIN: ROLE_OPSN

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
